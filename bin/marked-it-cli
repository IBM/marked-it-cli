#!/usr/bin/env node

/**
 * marked-it-cli
 *
 * Copyright (c) 2014, 2017 IBM Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software
 * and associated documentation files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
 * LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/*eslint-env node */
const mdProcessor = require("../lib/mdProcessor");
const logger = require("../lib/logger");

const ARG_SOURCEDIR = "--sourceDir";
const ARG_OUTPUT = "--output";
const SWITCH_OVERWRITE = "--overwrite";
const SWITCH_ATTRIBUTES = "--disable-attributes";
const SWITCH_FOOTNOTES = "--disable-footnotes";
const SWITCH_FRONTMATTER = "--disable-front-matter";
const SWITCH_PDF = "--gen-pdf";
const SWITCH_VERBOSE = "--verbose";
const SWITCH_DEBUG = "--debug";
const SWITCH_TOCXML = "--toc-xml";
const SWITCH_TOCJSON = "--toc-json";
const OPTION_TOC_DEPTH = "--toc-depth";
const OPTION_PDFOPTIONSFILE = "--pdf-options-file";
const OPTION_EXTENSIONFILE = "--extension-file";
const OPTION_HEADERFILE = "--header-file";
const OPTION_FOOTERFILE = "--footer-file";
const OPTION_CONREFFILE = "--conref-file";
const OPTION_KEYREFFILE = "--keyref-file";
const SWITCH_HELP = "--help";

const DEFAULT_TOC_DEPTH = 3;
const REGEX_EXTENSION_ARG = /^--@([^:]+):([^$]+)$/

let sourceDir, destDir;
let overwrite, disableAttributes, disableFootnotes, disableFrontMatter, genPdf, verbose, debug;
let headerFile, footerFile, pdfOptionsFile, keyrefFile;
const extensionFiles = [];
let tocJSON, tocXML, tocDepth;
let help;
const extensionData = {};

const package = require('../package.json');
console.log(`marked-it-cli v${package.version}\n`)

let switchCounter = 0;
process.argv.forEach(function (arg) {
  switchCounter++;
  if (arg.indexOf(ARG_OUTPUT) === 0 && arg.indexOf("=") !== -1) {
    destDir = arg.substring(arg.indexOf("=") + 1);
  } else if (arg.indexOf(SWITCH_OVERWRITE) === 0) {
    overwrite = true;
  } else if (arg.indexOf(SWITCH_ATTRIBUTES) === 0) {
    disableAttributes = true;
  } else if (arg.indexOf(SWITCH_FOOTNOTES) === 0) {
    disableFootnotes = true;
  } else if (arg.indexOf(SWITCH_FRONTMATTER) === 0) {
    disableFrontMatter = true;
  } else if (arg.indexOf(SWITCH_PDF) === 0) {
    genPdf = true;
  } else if (arg.indexOf(SWITCH_VERBOSE) === 0) {
    verbose = true;
  } else if (arg.indexOf(SWITCH_DEBUG) === 0) {
    debug = true;
  } else if (arg.indexOf(SWITCH_TOCXML) === 0) {
    tocXML = true;
  } else if (arg.indexOf(SWITCH_TOCJSON) === 0) {
    tocJSON = true;
  } else if (arg.indexOf(OPTION_TOC_DEPTH) === 0 && arg.indexOf("=") !== -1) {
    tocDepth = arg.substring(arg.indexOf("=") + 1);
  } else if (arg.indexOf(OPTION_PDFOPTIONSFILE) === 0 && arg.indexOf("=") !== -1) {
    pdfOptionsFile = arg.substring(arg.indexOf("=") + 1);
  } else if (arg.indexOf(OPTION_EXTENSIONFILE) === 0 && arg.indexOf("=") !== -1) {
    extensionFiles.push(arg.substring(arg.indexOf("=") + 1));
  } else if (arg.indexOf(OPTION_HEADERFILE) === 0 && arg.indexOf("=") !== -1) {
    headerFile = arg.substring(arg.indexOf("=") + 1);
  } else if (arg.indexOf(OPTION_FOOTERFILE) === 0 && arg.indexOf("=") !== -1) {
    footerFile = arg.substring(arg.indexOf("=") + 1);
  } else if (arg.indexOf(OPTION_CONREFFILE) === 0 && arg.indexOf("=") !== -1) {
    keyrefFile = arg.substring(arg.indexOf("=") + 1);
  } else if (arg.indexOf(OPTION_KEYREFFILE) === 0 && arg.indexOf("=") !== -1) {
    keyrefFile = arg.substring(arg.indexOf("=") + 1);
  } else if (arg.indexOf(SWITCH_HELP) === 0) {
    help = true;
  } else if (arg.indexOf("-") !== 0) {
    sourceDir = arg;
  } else {
    const match = REGEX_EXTENSION_ARG.exec(arg);
    if (match) {
      const extensionId = match[1];
      extensionData[extensionId] = extensionData[extensionId] || {};
      const args = match[2].split(",");
      args.forEach(function (arg) {
        const index = arg.indexOf("=");
        if (index === -1) {
          extensionData[extensionId][arg] = null;
        } else {
          extensionData[extensionId][arg.substring(0, index)] = arg.substring(index + 1);
        }
      });
    } else {
      /* don't display errors for the first two args (the node executable and .js file) */
      if (switchCounter > 2) {
        console.log("*** Ignoring unknown command-line switch: " + arg);
      }
    }
  }
});

if (help || !sourceDir || !destDir) {
  outputHelpPage();
} else {
  let loggerLevel = logger.WARNING;
  if (verbose) {
    loggerLevel = logger.INFO;
  }
  if (debug) {
    loggerLevel = logger.DEBUG;
  }
  const loggerInstance = new logger.Logger(loggerLevel);

  tocDepth = parseInt(tocDepth || DEFAULT_TOC_DEPTH);
  if (isNaN(tocDepth) || tocDepth < 0) {
    tocDepth = DEFAULT_TOC_DEPTH;
    loggerInstance.warning("Invalid " + OPTION_TOC_DEPTH + " value, using default value of " + DEFAULT_TOC_DEPTH + ".");
  }

  console.log("\nProcessing source directory: " + sourceDir + "...\n");

  mdProcessor.generate({
    sourceDir: sourceDir,
    destDir: destDir,
    overwrite: overwrite,
    disableAttributes: disableAttributes,
    disableFootnotes: disableFootnotes,
    disableFrontMatter: disableFrontMatter,
    generatePdf: genPdf,
    pdfOptionsFile: pdfOptionsFile,
    extensionFiles: extensionFiles,
    tocJSON: tocJSON,
    tocXML: tocXML,
    tocDepth: tocDepth,
    headerFile: headerFile,
    footerFile: footerFile,
    keyrefFile: keyrefFile,
    extensionData: extensionData
  }, loggerInstance);
}

function outputHelpPage() {
  console.log("\n\nUsage:\n\tmarked-it-cli <sourceDirectory> " + ARG_OUTPUT + "=<destinationDirectory> [OPTIONS]");
  console.log("\nRequired Arguments:\n");
  console.log("<sourceDirectory>");
  console.log("\tThe path of the directory containing source Markdown files");
  console.log(ARG_OUTPUT + "=<destinationDirectory>");
  console.log("\tThe path of the directory to write generated files to");
  console.log("\nOptions:\n");
  console.log(SWITCH_OVERWRITE);
  console.log("\tOverwrite output files that already exist");
  console.log(SWITCH_ATTRIBUTES);
  console.log("\tDisable processing of Kramdown-style attribute lists");
  console.log(SWITCH_FOOTNOTES);
  console.log("\tDisable processing of extended footnotes syntax");
  console.log(SWITCH_FRONTMATTER);
  console.log("\tDisable processing of Jekyll-style front matter blocks");
  console.log(SWITCH_TOCJSON);
  console.log("\tGenerate a toc.json file for directories containing a valid toc file");
  console.log(SWITCH_TOCXML);
  console.log("\tGenerate a toc.xml file for directories containing a valid toc file");
  console.log(OPTION_TOC_DEPTH + "=<maxHeaderLevel>");
  console.log("\tSet the maximum header level that will appear in toc files (default=" + DEFAULT_TOC_DEPTH + ")");
  console.log(SWITCH_VERBOSE);
  console.log("\tOutput verbose details");
  console.log(SWITCH_DEBUG);
  console.log("\tOutput even more verbose details");
  console.log(SWITCH_PDF);
  console.log("\tGenerate .pdf files");
  console.log(OPTION_PDFOPTIONSFILE + "=<pdfOptionsFile>");
  console.log("\tPath to the file with PDF generation options");
  console.log(OPTION_EXTENSIONFILE + "=<extensionFile>");
  console.log("\tPath to a file containing extensions for customizing generation");
  console.log(OPTION_HEADERFILE + "=<headerSourceFile>");
  console.log("\tPath to the file with content to be prepended to the generated .html");
  console.log(OPTION_FOOTERFILE + "=<footerSourceFile>");
  console.log("\tPath to the file with content to be appended to the generated .html");
  console.log(OPTION_CONREFFILE + "=<conrefFile>");
  console.log(`\tPath to the file containing DITA-style variable definitions (DEPRECATED, switch to use '${OPTION_KEYREFFILE}')`);
  console.log(OPTION_KEYREFFILE + "=<keyrefFile>");
  console.log("\tPath to the file containing DITA-style variable definitions");
  console.log("\nUse of these options is demonstrated in the \"examples\" directory.");
  console.log("\nHomepage: <https://github.com/grant-g/marked-it-cli>\n");
}
